1 - criar pasta do projeto
2 - npm init e configurar nomear o projeto, com versao, autor, etc
3 - alterar script package.json para "start": "dev" para nao subir em producao e dar algum erro.
4 - npm i express para instalar o express no projeto (depois do comando as pasta node_modules e package-lock.json vao aparecer). Essa ultima tras com ela todas as dependencias que serao necessarias. 
5 - Se nao tiver node_modules instalado o express nao roda na nossa maquina
6 - criar index.js  
7 - criar constante express 

const express = require("express");
//executar essa constante
const app = express();

//criar endpoint get (rota)
app.get("/", (req,res) => {
	res.send("Mensagem a exibir");
	});
	
//define porta 
app.listen(3000);

//npm start para rodar 

//se alterarmos a rota precisamos parar o servidor e executa-lo novamente (se nao usar o nodemon)

//para evitar isso instalamos o nodemon
npm i nodemon

//ir para o package.json e colocar outro script chamado "dev": "nodemon index". Esse script nos permite trabalhar em ambiente de desenvolvimento sem ficar parando toda hora a aplicacao.
//para rodar o script dev, executar o comando:
npm run dev

//criar arquivo .gitignore na pasta raiz do projeto e ignorar a pasta node_modules.

//se baixarmos o arquivo do git e quisermos rodar ele, precisamos dar o comando:
npm i 
//esse comando baixa todas as dependencias. Isso e necessario porque quando subimos o projeto para o git nos nao subimos a pasta node_modules com as dependencias 
necessarias para rodar o projeto.

//criando o projeto:

//criar pasta src na raiz do projeto 
//criar as seguintes pastas dentro de src: controllers, database, middlewares, models e routes.
//dentro de controllers, criar o arquivo controller.js
//dentro de routes, criar o arquivo user.route.js
//criar const route = require("express").Router();    -> Assim ja criamos a const e executamos o express, sem necessidade de criar a const app
//ainda dentro do arquivo route.js, criar o metodo get:
PS: todas as rotas ficarao dentro desse arquivo, sendo que as callbacks ficarao no usercontroller.js 
route.get("/");

//no arquivo user.controller.js, criar modulo:
const create = (req, res) => {
    const user = req.body;
    
    res.json(user)
};

//aqui estamos criando a const user e armazenando o que estamos enviando atraves do body pelo metodo POST, e retornando um objeto json user com todos os dados desse usuario.

--------------------------------------------------------------------------------------------------------------------------------------------------------

// exportar modulo user:
module.exports = { create }   -> Assim exportamos o modulo como objeto.

--------------------------------------------------------------------------------------------------------------------------------------------------------

//no arquivo user.route.js, importar o user.controller, que sera o segundo parametro da nossa funcao callback. O arquivo ficara assim: 

const route = require("express").Router();
const userController = require("../controllers/user.controller");

route.get("/", userController.user);

ainda em user.route.js, exportar o module:
module.exports = route;

--------------------------------------------------------------------------------------------------------------------------------------------------------

//ir para index.jse importar as rotas:
const userRoute = require("./src/routes/user.route");

//Ainda no arquivo index.js, incluir:
//para utilizar as rotas, comando app.use("/user", userRoute); 
//para o nosso projeto poder utilizar o json nas requisicoes, comando app.use(express.json());

--------------------------------------------------------------------------------------------------------------------------------------------------------

//no arquivo user.controller.js, deixar a funcao assim:
const create = (req, res) => {
    const user = req.body;
    
    res.json(user)
};

//aqui estamos criando a const user e armazenando o que estamos enviando atraves do body pelo metodo POST, e retornando um objeto json user com todos os dados desse usuario.
//podemos desestruturar o objeto user para pegar as informacoes dele como email, senha, etc de forma separada, dessa forma a sintaxe da funcao ficaria assim:

const create = (req, res) => {
    const {name, username, email, password, avatar} = req.body;      -> desestruturacao.

    if(!name || ! username || !email || !password || !avatar) {
        res.status(400).send({message: "Preencha todos os campos!"});
    }

    res.json("Ok");
};

module.exports = { create };

//agora nos vamos retornar a mensagem de usuario cadastrado com sucesso, status code 201 da MDN:
res.status(201).send({
	message: "Usuario cadastrado com sucesso",
	user: {
		name, 
		username, 
		email,
		password, 
		avatar
		},
	});
	
//e importante notar que enviamos dois objetos atraves do res.status(201).send: o primeiro objeto e a message e o segundo o user, com seus valores. 
//importante falar tambem que no caso de chaves e valores iguais no javascript, nao precisamos repetir. por isso nao escrevi assim:
	user{
		name: name,
		username: username,
		email: email,
		password: password,
		avatar: avatar
		},
	});
	
	
//agora nossa funcao create ficara assim: 
const create = (req, res) => {
    const {name, username, email, password, avatar} = req.body;

    if(!name || ! username || !email || !password || !avatar) {
        res.status(400).send({message: "Preencha todos os campos!"});
    }

    res.status(201).send({
        message: "Usuario cadastrado com sucesso!",
        user: {
            name, 
            username,
            email,
            avatar
        }, 
    });
};

//E valido falar tambem que na mensagem de sucesso eu nao coloquei a senha do user na tela, so os dados nao sensiveis.

--------------------------------------------------------------------------------------------------------------------------------------------------------

Ate aqui nao mexemos com banco de dados, vamos comecar agora. Verificar alguns detalhes sobre
banco de dados no arquivo mongoDb.

//depois de criar o banco de dados, vamos na pasta src/database e criamos o arquivo(modulo) db.js
//criar a const mongoose = require("mongoose");
//criar a const connectDatabase, que recebe uma arrow function, assim:
const connectDatabase = () => {
    console.log("Esperando conexao com o banco de dados.");

    mongoose.connect("mongodb+srv://diegodevwebb:P9dOaejq8R4TMk8u@titnews.6r4u2s8.mongodb.net/?retryWrites=true&w=majority",
    { useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log("MongoDb Atlas connected.")).catch((error) => console.log(error));
}

//obs: a string de conexao pegamos no mongodb atlas.
//exportar esse modulo:
module.exports = connectDatabase;

//depois vamos na pasta models e criamos o arquivo User.js (os arquivos da pasta model por convencao sempre comecam com letra maiuscula). 
//importar mongoose 
const mongoose = require("mongoose");

//criar const que sera um modelo padrao na hora de criar os usuarios

const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  userName: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,     //aqui o unique serve para impor exclusividade. No caso nao podemos ter dois emails iguais.
  },
  password: {
    type: String,
    required: true,
  },
  avatar: {},
});

//criar const para colocar o schema dentro e exportar:
const User = mongoose.model("User", UserSchema); 
//aqui estamos indicando o nome da model "User" e de onde ela vem: "UserSchema".

//exportar modulo 
module.exports = User;

//agora na pasta services, criar o arquivo(modulo) user.services.js (aqui tudo minusculo)
//dentro desse arquivo criar const importando o modelo que vamos usar no banco de dados:
const user = require("../models/User");

//depois criar uma const create. Essa const recebe os dados do body(primeiro parametro) e passa os dados que recebeu desse parametro no segundo.
const create = (body) => User.create(body);

//exportar modulo como objeto:
module.exports = {
    create, 
}

--------------------------------------------------------------------------------------------------------------------------------------------------------

//agora vamos no arquivo user.controller.js importar o user.service.js para poder fazer as verificacoes necessarias para criar o usuario. 
//o arquivo user.service.js e quem tem os metodos de criar, entao vamos importar para o user.controller.js e assim poder usar esse metodos aqui.

const userService = require("../services/user.service");

//agora vamos criar a const user que vai receber o userService com todos os metodos que ele possui. 

const user = userService

//como esse userService tem todos os metodos, vamos utilizar o metodo create, que pega os dados do body, vai ficar assim:
    const user = userService.create(req.body);

//essa const vai ficar localizada logo apos o primeiro if dentro da const create desse modulo:

const create = (req, res) => {
    const {name, username, email, password, avatar} = req.body;

    if(!name || ! username || !email || !password || !avatar) {
        res.status(400).send({message: "Preencha todos os campos!"});
    }

	🚩️const user = userService.createService(req.body); ---->>> AQUI🚩️

    if(!user) {
        return res.status(400).send({message: "Erro ao criar usuario."});
    }

    res.status(201).send({
        message: "Usuario cadastrado com sucesso!",
        user: {
            id: user._id,
            name, 
            username,
            email,
            avatar
        }, 
    });
};

//dessa forma temos a const create, que vai criar o usuario. Ela verifica se algum campo esta em branco, se nao estiver ela pega os dados do body atraves da const user, e por fim faz mais uma verificacao, onde ve se os dados foram recebidos. Se nao foram, retorna um erro ao criar usuario, se foram ela retorna os dados desse usuario. 

//como o create faz algo assincrono (ir no banco de dados, criar e retornar os dados e passar para a funcao) nos precisamos colocar o async e await para nao dar erro nas verificacoes. Porque senao nao vamos ter todos os dados na hora das verificacoes.

//o async sempre e colocado antes dos parametros da funcao:

const create = 🚩️async (req, res) => {
    const {name, username, email, password, avatar} = req.body;

    if(!name || ! username || !email || !password || !avatar) {
        res.status(400).send({message: "Preencha todos os campos!"});
    }

//e o await vai ficar antes de userService pelo seguinte motivo: 
//ao colocar ele aqui, estamos dizendo: Espera executar o userService.createService para poder continuar a verificacao.

    const user = 🚩️ await userService.createService(req.body);

//se nao esperarmos vai dar erro, porque quando chegar nesse if o user ainda nao vai ter o retorno de user.Service.createService (pq ele e assincrono)

    if(!user) {
        return res.status(400).send({message: "Erro ao criar usuario."});
    }

    res.status(201).send({
        message: "Usuario cadastrado com sucesso!",
        user: {
            id: user._id,
            name, 
            username,
            email,
            avatar
        }, 
    });
};

🚩️interessante saber: o index acessa a rota, que por sua vez acessa o controller, que acessa o service

--------------------------------------------------------------------------------------------------------------------------------------------------------

//criando a rota get

na user.route.js, criar route.get("/", userController.findAllUsers);
//como essa funcao findAll ainda nao existe, vamos no user.controller.js cria-la
const findAll = async (req, res) => {
    const users = await userService.findAllService();  //esse findAllService vem do services
    
    if(users.length === 0) {
        return res.status(400).send({ message: "Nao ha usuarios cadastrados."});
    }

    res.send(users);
}

//exportar findAll
module.exports = { create(que ja estava aqui), findAll };

//criar findAllService no arquivo services
const findAllService = () => User.find();

//exportar findAllService 

//criar rota para trazer o usuario pelo id
route.get("/:id", userController.findById);

const findById = async (req, res) => {
    const id = req.params.id;   🚩️aqui a requisicao e pelo parametro id 

    if(!mongoose.Types.ObjectId.isValid(id)){
        return res.status(400).send({message: "ID invalido!"}); //🚩️Se o id nao for valido, retorna o erro
    }

    const user = await userService.findByIdService(id);

    if(!user) {
        return res.status(400).send({message: "Usuario nao encontrado"}); //🚩️se nao encontrar o usuario, retorna o erro message
    }

    res.send(user); //🚩️Senao ele mostra o user com todos os dados.
}

//criar findByIdService
const findByIdService = (id) => User.findById(id);

//depois, exportar findByIdService
















